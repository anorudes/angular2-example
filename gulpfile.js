// Generated by CoffeeScript 1.9.2
var $, connect, babel, babelify, browserify, clean, coffee, concat, concatCss, gulp, gulpif, minifyCss, notify, order, out, plumber, react, runSequence, sass, source, sourcemaps, src, streamify, swallowError, uglify, del, rename, traceur, app;

gulp = require('gulp');
$ = require('gulp-load-plugins')();
src = '';
out = '';
order = require("gulp-order");
autoprefixer = require('gulp-autoprefixer');
connect = require('gulp-connect');
concat = require("gulp-concat");
clean = require('gulp-clean');
runSequence = require('run-sequence');
coffee = require('gulp-coffee');
gulpif = require('gulp-if');
gulp - (uglify = require('gulp-uglify'));
minifyCss = require('gulp-minify-css');
concatCss = require('gulp-concat-css');
notify = require("gulp-notify");
sass = require('gulp-sass');
sourcemaps = require('gulp-sourcemaps');
babel = require("gulp-babel");
ngAnnotate = require('gulp-ng-annotate');
notify = require("gulp-notify");
browserify = require('browserify');
imagemin = require('gulp-imagemin');
babelify = require('babelify');
source = require('vinyl-source-stream');
streamify = require('gulp-streamify');
plumber = require('gulp-plumber');
spritesmith = require('gulp.spritesmith');

del = require('del');
rename = require('gulp-rename');
traceur = require('gulp-traceur');

var PATHS = {
    src: {
      root: 'src',
      js: 'src/js/**/*.js',
      html: 'src/html/**/*.html'
    },
    lib: [
      'node_modules/gulp-traceur/node_modules/traceur/bin/traceur-runtime.js',
      'node_modules/es6-module-loader/dist/es6-module-loader-sans-promises.src.js',
      'node_modules/systemjs/lib/extension-register.js',
      'node_modules/reflect-metadata/Reflect.js',
      'node_modules/angular2/node_modules/zone.js/dist/zone.js',
      'node_modules/angular2/node_modules/zone.js/dist/long-stack-trace-zone.js'
    ]
};

swallowError = function(error) {
    console.log(error.toString());
    notify().write(error.toString());
    this.emit('end');
};

gulp.task("css-min", function() {
    return gulp.src(["src/css/libs/base.css", "src/css/libs/**/*.css"]).pipe(concat("libs.css")).pipe(minifyCss({
        keepBreaks: false,
        processImport: false
    })).pipe(gulp.dest('dist/css'));
});


gulp.task('sass', function() {
    gulp;
    return gulp.src('dist/css/*.scss').pipe(sourcemaps.init()).pipe(sass({
        errLogToConsole: false,
        onError: function(err) {
            return notify().write(err);
        }
    })).pipe(minifyCss({
        compatibility: 'ie8'
    }))
    .pipe(autoprefixer({
        browsers: ['last 2 versions'],
        cascade: false
    }))
    .pipe(sourcemaps.write('.', {sourceRoot: PATHS.src.root}))
    .pipe(gulp.dest('dist/css'));
});




gulp.task('clean', function(done) {
  del(['dist'], done);
});

gulp.task('js', function () {
    return gulp.src(PATHS.src.js)
        .pipe(rename({extname: ''})) //hack, see: https://github.com/sindresorhus/gulp-traceur/issues/54
        .pipe(plumber())
        .pipe(sourcemaps.init())
        .pipe(traceur({
            sourceMaps: true,
            modules: 'instantiate',
            moduleName: true,
            annotations: true,
            types: true,
            memberVariables: true
        }))
        .pipe(rename({extname: '.js'})) //hack, see: https://github.com/sindresorhus/gulp-traceur/issues/54
        .pipe(sourcemaps.write('.'))
        .pipe(gulp.dest('dist'))
        .pipe(connect.reload())
});

gulp.task('html', function () {
    return gulp.src(PATHS.src.html)
        .pipe(gulp.dest('dist'))
        .pipe(connect.reload());
});

gulp.task('libs', ['angular2'], function () {
    var size = require('gulp-size');
    return gulp.src(PATHS.lib)
      .pipe(size({showFiles: true, gzip: true}))
      .pipe(gulp.dest('dist/lib'));
});

gulp.task('angular2', function () {

  var buildConfig = {
    paths: {
      "angular2/*": "node_modules/angular2/es6/prod/*.es6",
      "rx": "node_modules/angular2/node_modules/rx/dist/rx.js"
    },
    meta: {
      // auto-detection fails to detect properly here - https://github.com/systemjs/builder/issues/123
      'rx': {
        format: 'cjs'
      }
    }
  };

  var Builder = require('systemjs-builder');
  var builder = new Builder(buildConfig);

  return builder.build('angular2/angular2', 'dist/lib/angular2.js', {});
});

gulp.task('default', ['build'], function () {
    
    gulp.watch(PATHS.src.html, ['html']);
    gulp.watch(PATHS.src.js, ['js']);
    connect.server({
            root: "./dist/",
            port: 1338,
            livereload: true
    });    
});

gulp.task('watch-css', function() {
    gulp.watch(['css/**/*.scss'], ['sass']);      
    gulp.watch(['src/css/libs/*.css'], ['css-min']);  
});


gulp.task('build', ['js', 'html', 'libs', 'sass', 'css-min', 'watch-css']);


